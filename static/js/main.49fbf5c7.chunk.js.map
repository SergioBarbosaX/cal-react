{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["buttons","id","keyCode","initialInput","App","props","state","input","previousInput","operation","evaluated","handleNumberButton","bind","handleOperationButton","handleResultButton","handleClearButton","handleDecimalButton","eventClickNumberButton","this","inputState","previousInputState","operationState","buttonClicked","target","textContent","setState","eventClickOperationButton","slice","length","eventClickResultButton","operationResult","eval","eventClickClearButton","eventClickDecimalButton","test","className","Operation","opdisplay","Input","inputdisplay","Buttons","number","result","clear","decimal","React","Component","map","element","String","fromCharCode","onClick","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49fbf5c7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst buttons = [\n  {id: \"clear\",     keyCode: \"67\"},\n  {id: \"divide\",    keyCode: \"47\"},\n  {id: \"multiply\",  keyCode: \"42\"},\n  {id: \"seven\",     keyCode: \"55\"},\n  {id: \"eight\",     keyCode: \"56\"},\n  {id: \"nine\",      keyCode: \"57\"},\n  {id: \"subtract\",  keyCode: \"45\"},\n  {id: \"four\",      keyCode: \"52\"},\n  {id: \"five\",      keyCode: \"53\"},\n  {id: \"six\",       keyCode: \"54\"},\n  {id: \"add\",       keyCode: \"43\"},\n  {id: \"one\",       keyCode: \"49\"},\n  {id: \"two\",       keyCode: \"50\"},\n  {id: \"three\",     keyCode: \"51\"},\n  {id: \"equals\",    keyCode: \"61\"},\n  {id: \"zero\",      keyCode: \"48\"},  \n  {id: \"decimal\",   keyCode: \"46\"}\n];\n\nconst initialInput = '0';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: '0',\n      previousInput: '',\n      operation: '',\n      evaluated: false \n    };\n\n    this.handleNumberButton     = this.handleNumberButton.bind(this);\n    this.handleOperationButton  = this.handleOperationButton.bind(this);\n    this.handleResultButton     = this.handleResultButton.bind(this);\n    this.handleClearButton      = this.handleClearButton.bind(this);\n    this.handleDecimalButton    = this.handleDecimalButton.bind(this);\n  }\n\n  handleNumberButton(eventClickNumberButton) {\n    const {input: inputState, previousInput: previousInputState, operation: operationState} = this.state;\n    let buttonClicked = eventClickNumberButton.target.textContent;\n\n    if (inputState === initialInput) \n      this.setState({input: buttonClicked, operation: buttonClicked});\n    else if (previousInputState === 'operand')\n      this.setState({input: buttonClicked, previousInput: '', operation: operationState+buttonClicked}); \n    else if ((previousInputState === 'decimal'))\n      this.setState({input: inputState+buttonClicked, previousInput: '', operation: operationState+buttonClicked});\n    else\n      this.setState({input: inputState+buttonClicked, operation: operationState+buttonClicked});\n  }\n\n  handleOperationButton(eventClickOperationButton) {\n    const {input: inputState, previousInput: previousInputState, operation: operationState} = this.state;\n    let buttonClicked = eventClickOperationButton.target.textContent;\n\n    if (inputState === initialInput)\n      this.setState({input: buttonClicked, previousInput: 'operand', operation: inputState+buttonClicked});\n    else if ((operationState !== '') && (previousInputState !== 'operand')) {\n      if (buttonClicked === '-')\n        this.setState({input: buttonClicked, previousInput: 'operand', operation: operationState+'-'});\n      this.setState({input: buttonClicked, previousInput: 'operand', operation: operationState+buttonClicked});\n    }\n    else if (previousInputState === 'operand') {\n      if (operationState.slice(operationState.length-1, operationState.length) === '-')\n        this.setState({input: buttonClicked, previousInput: 'operand', operation: operationState.slice(0, operationState.length-2)+buttonClicked});\n      else if (buttonClicked === '-')\n        this.setState({input: buttonClicked, previousInput: 'operand', operation: operationState+buttonClicked});\n      else\n        this.setState({input: buttonClicked, previousInput: 'operand', operation: operationState.slice(0, operationState.length-1)+buttonClicked});\n    }\n  }\n\n  handleResultButton(eventClickResultButton) {\n    const {operation: operationState} = this.state;\n    \n    let operationResult = eval(operationState);\n    this.setState({input: operationResult, operation: operationResult});\n  }\n\n  handleClearButton(eventClickClearButton) {\n    this.setState({\n      input: '0',\n      previousInput: '',\n      operation: '',\n      evaluated: false\n    });\n  }\n\n  handleDecimalButton(eventClickDecimalButton) {\n    const {input: inputState, previousInput: previousInputState, operation: operationState} = this.state;\n    let buttonClicked = eventClickDecimalButton.target.textContent;\n\n    if (/\\./.test(inputState))\n      return;\n\n    if ((inputState === initialInput) && (operationState.length === 0))\n      this.setState({input: inputState + buttonClicked, previousInput: 'decimal', operation: inputState + buttonClicked});\n    else if (operationState.length > 0)\n      this.setState({input: inputState+buttonClicked, previousInput: 'decimal', operation: operationState+buttonClicked});\n    else if (previousInputState === 'operand')\n      this.setState({input: '0'+buttonClicked, previousInput: '', operation: operationState+'0'+buttonClicked});\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calculator-container\">\n          <Operation opdisplay={this.state.operation} />\n          <Input inputdisplay={this.state.input} />\n          <Buttons \n          number={this.handleNumberButton}\n          operation={this.handleOperationButton}\n          result={this.handleResultButton}\n          clear={this.handleClearButton}\n          decimal={this.handleDecimalButton}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Operation extends React.Component {\n  render() {\n    return (\n      <div id=\"op-display\">{this.props.opdisplay}</div>\n    );\n  }\n}\n\nclass Input extends React.Component {\n  render() {\n    return (\n      <div id=\"display\">{this.props.inputdisplay}</div>\n    );\n  }\n}\n\nclass Buttons extends React.Component {\n  render() {\n    return (\n      <div id=\"buttons-pad\">{\n        buttons.map(element => {\n          if (/\\d/.test(String.fromCharCode(element.keyCode)))\n            return <div id={element.id} onClick={this.props.number}     key={element.id}    className=\"cal-button\">{String.fromCharCode(element.keyCode)}</div>\n          else if(/[+|\\-|*|/]/.test(String.fromCharCode(element.keyCode)))\n            return <div id={element.id} onClick={this.props.operation}  key={element.id}    className=\"cal-button\">{String.fromCharCode(element.keyCode)}</div>\n          else if(/=/.test(String.fromCharCode(element.keyCode)))\n            return <div id={element.id} onClick={this.props.result}     key={element.id}    className=\"cal-button\">{String.fromCharCode(element.keyCode)}</div>\n          else if(/C/.test(String.fromCharCode(element.keyCode)))\n            return <div id={element.id} onClick={this.props.clear}      key={element.id}    className=\"cal-button\">{String.fromCharCode(element.keyCode)}</div>\n          return <div id={element.id} onClick={this.props.decimal}      key={element.id}    className=\"cal-button\">{String.fromCharCode(element.keyCode)}</div>\n        })\n      }\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}